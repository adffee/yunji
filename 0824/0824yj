1. video 태그
    비디오 파일의 높이는 너비에 맞춰 비율이 자동 조정되므로 비디오 파일의 크기는 너비만 지정. 높이를 지정하는 경우 동영상 파일과 재생 관련 인터페이스가 분리되어 표시될 수 있음에 주의
    < video 태그 >
    - 비디오 파일을 재생시킬 수 있는 미디어 플레이어를 생성.
    > controls : 비디오 재생과 관련된 인터페이스를 표시.
    > muted : 재생 시 음소거.
    > autoplay : 페이지가 열릴 때 자동 재생. 단, muted 속성이 설정된 경우에만 자동 재생기능이 활성화되도록 하는 브라우저들이 대부분이며 웹 표준도 이를 권장.
    ※ 브라우저 별 지원되는 파일 형식 확인 : https://caniuse.com/
    ※ Video format 형식 : avi, mpeg, mkv, wmv, mp4, ogv, webM 등.
    img 태그와 달리 닫는 태그가 있어 img 태그의 alt 속성 대신에 video 태그의 컨텐츠 표현 부분에 해당 브라우저에서 비디오 형식이 지원되지 않는 경우의 대체 텍스트(Fallback contents) 지정.
    < source 태그 >
    - video 태그의 src 속성 대신에 source 태그의 src 속성을 이용하여 switch 형식의 파일 형식 지정. 순차적으로 source 태그에 지정된 파일 형식을 검토하여 브라우저 지원 여부에 따라 선별적 실행.
    > type : 해당 경로 파일의 형식 지정.
    < poster 속성 활용 >
    1> autoplay 속성이 지정되지 않은 상황에서 미디어 파일이 재생전 대표 이미지 경로를 지정. autoplay 속성이 지정된 경우에는 미디어 파일이 로딩되기 전까지만 표시.
    2> 미디어 파일 로드가 지연되는 경우 화면에 아무것도 표시되지 않는 상황을 대비하여 대표 이미지를 지정.
    < preload 속성 >
    - 재생전 미디어 파일을 미리 다운로드할 것인지의 여부를 지정.> auto : 사용자의 미디어 재생 여부 의지와 관계없이 미디어 파일을 미리 다운로드함으로써 미디어 파일에 대한 재생이 신속히 이루어지는 반면, 재생을 하지 않더라도 미리 다운로드가 진행됨으로서 해당 트래픽이 무조건 수반되는 단점.
    none : 사용자가 미디어 파일을 재생하는 시점에서야 파일을 다운로드함으로써 재생을 하는 경우에만 트래픽이 발생되는 반면, 재생 시점에서 다운로드가 진행됨에 따라 신속한 재생이 불가한 단점.
    < loop >
    - 반복 재생 기능을 지정.
    < audio 태그 >
    - 오디오 파일을 재생시킬 수 있는 미디어 플레이어를 생성.
    기타 사용 방법은 audio 태그와 동일.
2. 인라인 스타일 시트
    < CSS(Cascading Style Sheet) >
    - 스타일을 미리 정의하여 필요할 때 호출함으로써 코드의 유지보수와 웹 페이지 로딩 속도 향상. 또한 캐스캐이딩이란 단어의 뜻과 같이 상위 태그에 지정된 속성이 하위 태그에도 연쇄적으로 적용되는 상속 특성을 가짐. 단, 부모 태그로부터 상속된 속성이더라도 하위 태그에서 동일한  속성을 적용 시에는 하위 태그에 적용된 속성 값으로 수렴되어 적용. 단, font-size 속성에 대한 % 비율 적용 시에는 부모와 자식 요소가 동시에 % 비율을 지정할 때 자식 요소의 비율로만 수렴되는 것이 아닌, 부모 요소와 자식 요소의 비율이 연쇄 적용되어 부모요소의 비율에 다시 자식 요소의 비율이 연쇄 적용됨에 주의.
    < 인라인(Inline) 스타일 시트 >
    - 개별 태그에 스타일을 지정하는 방식으로 style 속성 내에 내부 속성과 값을 콜론(:)으로 구분하여 표기하되 다른 내부 속성과 구분하기 위한 구분자로 세미콜론(;) 표기. 
    style 속성의 내부 속성이나 값은 반드시 쌍따옴표("") 내에 작성해야 함에 유의.인라인 스타일은 현재의 웹 표준에 부합하지 않는 방식으로 테스트 목적으로만 사용.
    형식    :   style = "속성명:값; 속성명:값; ..."
    font-size 속성은 디폴트 단위가 픽셀(px)로 지정되어 접미사 "px" 생략 가능.
    font-size 속성 생략 시에는 디폴트 16px 적용. 
3. 내부 스타일 시트
    < 내부 스타일 시트 >
    - head 태그 소속인 style 태그 내에 미리 정한 스타일 속성을 선택자라는 형식으로 그룹화하여 특정 명칭으로 개별 태그를 참조하거나 태그들을 선별 그룹화하여 스타일을 지정하는 방식.스타일을 정의하는 방식은 크게 태그 선택자, 클래스 선택자, id 선택자로 구분되며 일반적으로 하나의 독립적인 페이지내에만 적용되는 특정 스타일을 지정하기 위한 목적으로 사용. 
    
    스타일 소성 적용 시 마지막 속성의 세미콜론은 생략 가능하지만
    차후 속성이 추가되는 경우의 유지보수성을 위해 표기하는 습관을 권장.
            
    p 태그에 대한 선택자로 font-size 속성 적용 시 최상단의 p 태그도 속성 값 적용이 되므로 아래와 같이 id 선택자로 개별 지정을 하거나 자식(Child) 선택자를 이용하여 개별 지정.

    ※ CSS의 주석은 /*  와  */  사이에 표현

4. 외부 스타일 시트
    < 외부 스타일 시트  >
    - HTML 문서 외부에 정의된 CSS파일( 확장자 : CSS )을 미리 저장해두고 HTM L문서의 head 태그 내의 link 태그를 이용하여 CSS파일에 정의된 스타일을 호출하여 가져오는 방식. 공통적인 스타일을 그룹화함으로써 서로 다른 HTML 문서에 동일한 스타일을 적용 가능.
    < link 태그 >
    - 외부에 존재하는 파일을 해당 페이지와 연동시키는 역할.
    > rel(relation) : 해당 HTML 문서와 연결 대상 문서와의 관계를 명시.
    > href : 연결할 문서의 경로와 파일명 명시.
5. 태그, id, 클래스 선택자
    < 태그(or Type) 선택자(Selector) >
    - 개별 태그에 대한 속성들을 미리 정의함으로써 본문에 적용된 태그에 자동으로 스타일 적용. 
    > 선택자 형식   :   태그명 { 속성 정의  }
    < 클래스 선택자(Selector) >
    - 하나 이상의 태그에 복수 적용이 가능한 클래스명(식별자)을 지정함으로써 다중 태그를 그룹화하여 해당 태그들의 스타일을 그룹핑하여 적용하는 형식. 특정 태그에 다중 클래스 식별자 지정도 가능하며 다중 클래스 선택자 지정도 가능.
    > 선택자 형식    :     .클래스명 { 속성 정의 }
                            .클래스명1.클래스명2.클래스명3 { 속성 정의 }        - 다중 클래스 선택자
    > 식별자 형식    :       < 특정태그명  class = "클래스명" >
                            < 특정태그명  class = "클래스명1  클래스명2  클래스명3" >
    < id 선택자(Selector) >
    - 클래스 선택자와 달리 본문의 특정 단일 태그에만 id 식별자 지정이 가능하며 특정 태그에 다중 id 식별자 지정도 불가. 여러 태그에 id 식별자 지정 시 당장은 적용 가능하지만, 차후 태그에 대한 동적 기능을 부여 시 최초 할당 id 식별자가 적용된 태그에만 적용되는 문제 발생. 또한 특정 태그에 다중 id 식별자 지정 또한 id 의 고유성 조건이 충족되지 않아 모든 스타일 속성 지정이 실현되지 않음. 특정 태그에 클래스 식별자와 id 식별자를 동시 적용시키는 것도 가능한데 이 때에는 중복되는 속성에 대하여 id 식별자가 우선 적용. id 선택자는 a 태그를 이용한 페이지 내부 링크나 form 태그 내 label 태그에 적용하는 것 외에는 사용을 최소화하는 것을 권장.
    > 선택자 형식    :   #id명 { 속성 정의 }
    > 식별자 형식   :   < 특정태그명  id = "id명"         
6. 선택자 Choice
7. 선택자 Choice
    id 선택자 적용 시 모든 속성 설정을 개별 지정해야 하며 재활용 불가.
8. class 선택
9. 실습
10. 그룹핑
11. 인접형제결합자
    < 인접 형제 결합자(Adjacent Sibling Combinator) >
    - 부모가 동일한 인접 형제 요소에 대하여   선행 요소의 "+" 결합자 이후에 결합되는 최종 형제 요소에 스타일 적용.
    선행 요소와 "+" 결합자 뒤에 명시되는 형제 요소의 명칭이나 순서가 일치해야만 적용되며 최종 우변 형제 요소에만 스타일 적용.
    h1 태그와 h2 태그는 형제 태그가 맞지만 그 중간에 hr 태그가 포함되어 결합 형식이 일치하지 않으므로 스타일 미적용.
12. 자식 결합자
    < 자식 결합자(Child combinator) >
    - 결합자 ">" 로 부모와 자식요소를 구분하여 지정된 자식요소를 포함한 직계 서브 요소에 스타일링 적용.
    단, 상속이 적용되는 속성은 상속 규칙에 의거 동일한 스타일링 적용. 형식 : 부모요소 > 자식요소
13. 자손(하위) 결합자
    < 자손(하위) 결합자(Descendant combinator) >
    - 부모와 자식요소를 공백 결합자로 구분하여 지정된 자식요소를 포함한 직계 서브 요소뿐만 아니라, 직계가 아닌 해당 자손요소도 포함하여 스타일링 적용. 형식 : 조상요소  자손요소
14. 범용 선택자
    < 범용 선택자(Universal Selector) >
    - 모든 태그를 지칭. 형식 : * {       }
    < 선택자의 우선 순위 >
    - 선택자의 우선 순위는 명시적 표현이 가장 가까운 것을 최우선 적용.
    위의 예시의 경우 모든 태그를 지칭하는 * 보다는 div 태그의 모든 상속 계층의 태그를 지칭하는 div * 선택자 형식이 더 명식적이므로 우선 적용. 하지만 아래와 같이 자식(하위) 선택자를 이용하는 경우 div 의 모든 자식 태그까지는 우선 순위가 먼저 적용되지만, 그 이하 상속 계층의 하위 태그는 상속에 의한 속성이 전달될뿐 모든 태그를 의미하는 * 보다는 명시적 특성이 떨어지므로 * 선택자가 우선 적용.
    < text-decoration 속성의 상속과 우선 순위 예외 >
    - text-decoration 속성은 다른 속성과 마찬가지로 자손에 상속되지만 자손 요소에서 none 값을 적용하여 텍스트 장식 제거는 불가. 개발자 도구에서는 none 으로 확인되지만 실제 디스플레이 되는 형태는 그대로 텍스트 장식이 적용되는 것을 확인 가능. 따라서 부모 요소에석 적용한 text-decoration 적용한 텍스트 장식은 자식 요소에서 추가는 되지만 제거는 불가.

15. 일반 형제 결합자
    < 일반 형제 결합자(General sibling combinator) >
    - 부모가 동일한 인접 형제 요소에 대하여 선행 요소를 제외한 "~" 뒤에 지정된 모든 요소에 대하여 스타일 적용.
16. 예제
    < 지시사항 >

    1. 본문을 참조하여 적절한 그룹 지정.

    2. 텍스트 크기.
    - h1 : 50px
    - h2, 리스트 텍스트("디젤") : 30px
    - 리스트 : 20px

    3. 리스트 텍스트("디젤") : 언더라인 지정.

    4. class 식별자는 ul 에민 지정.
    ( 식별자는 최대 2개로 제한)

    5. 텍스트와 배경 색상 지정 및 정렬은 구현 페이지 참조.