1. 가상 요소 선택자

    < 가상 요소 선택자(Pasduo-element Seloctors) >
    - 선택한 요소의 특정 부분에 특정 스타일이나 내용을 지정.
    가상 클래스 선택자와 구분하기 위해 구분자로 단일콜론(:) 대신 이중콜론(::)을 사용.
    단, 현재까지는 단일콜론(:)을 허용.


2. 사용자 정의 속성(data-)과 attr 함수

    < attr 함수 >
    - 인수로 지정된 속성에 대한 value 를 문자열로 반환하되 속성이 존재하지 않으면 빈 문자열 반환.

    < 사용자 정의 속성 >
    - 접두사 "data-" 뒤에 임의 사용자 정의 속성명을 정의하고 value 를 할당함으로써 사용자 정의 속성에 해당하는 특정 value 를 컨텐트로 활용 가능.

3. 선택자 우선순위(Priority)

    < 선택자 우선순위(Priority) >
    범용(*) 선택자  <  태그 선택자   <  클래스 선택자  <  id 선택자  <  인라인 스타일  <   !important

    ※ 일반적인 선택자 우선순위는 계층이 동일한 경우 위에 명시된 순서로 우선순위가 적용되지만, 상속 계층간에서의 스타일 적용은 계층이 다른 경우 일반적인 선택자 우선순위가 무시되고 가장 가깝고 명시적 표현이 우선 적용.
    #important 는 특별한 경우(다른 사용자의 스타일 코드를 차용하여 수정이 필용한 경우)를 제외하고는 사용을 지양.

    동일한 선택자에 대한 동일 속성 스타일 지정 시 코드상 가장 나중에 명시한 선택자의 스타일로 스타일 지정.

    상속 계층간 우선순위 적용은 일반적인 선택자 우선순위에 영향을 받지 않고 항상 가장 가까운 계층이면서 명시적 표현이 우선 적용.
    따라서 아래의 경우 일반적인 선택자 우선순위는 태그 선택자 보다 #important 가 우선 적용되지만, 부모(div)에 적용된 #important 보다 자식(p)에 적용된 태그 선택자가 더 가깝고 명시적 표현이므로 자식에 지정된 스타일이 우선 적용.
        <div>
            <p>
                CSS priority settings!!<br>
                가장 가깝고 명식적 스타일 우선 적용!!<br>
                Complete!!
            </p>
        </div>

4. 복합 선택자 우선순위 경쟁규칙
    id선택자 100점 
    class , 속성(a[href]), 가상클래스(:hover) , 가상요소 10점
    태그 선택자(a) 1점
    전체선택자(*) 0점


5. 속성의 상속과 전역속성(inherit, initial, unset) 값
    < 상속되는 속성 >
    - color, font, text-align, white-space, word-spacing, list-style ... 등.
    < 상속되지 않는 속성 >
    - display, position, width, height, float, background, overflow, border ... 등.
    < initial >
    - 상속되는 속성에 대하여 그 속성이 가지는 기본값으로 초기화.여기서의 기본값은 태그별로 가지는 기본값이 아닌 속성이 가진 기본값임에 주의.
    < inherit >
    - 상속되지 않는 속성에 대하여 부모 요소로터 상속되도록 지정.
    < all >
    - 모든 속성을 지칭하는 속성으로 initial, inherit, unset 등을 지정 가능.
    < unset >
    - 상속되는 속성에는 상속값을 적용하고 상속되지 않는 속성에는 initial 적용. display 의 기본값은 inline 이며 div 태그가 가지는 display 속성의 기본값이 아닌 display 속성 자체가 가지는 기본값 속성이 적용.

6. 색상(Color) 지정
    body 의 자식이면서 h1, ul 이 아닌 태그. 브라우저 호환성 측면에서는 body>:not(h1):not(ul) 형식을 사용하는 것을 권장.
    < 1. 색상명 지정 >
    - 약속되어 있는 고유한 색상명을 직접 지정하는 형식.
    ※ VSCODE 에서는 색상 지정후 값에 마우스 포인터를 가져가면 RGB VIEW 를 통해 직접 지정 가능.
    < 불투명도(opacity) >
    - 모든 색상 지정 방식은 opacity 속성을 이용하여 별도의 불투명도 설정 가능.
    opacity 는 0 ~ 1.0 범위의 값으로 지정 가능하며 값이 낮을 수록 투명도가 높아지고 값이 높을수록 불투명도가 높아지는 특성.opacity 는 색상의 명도가 아닌 다른 요소와 겹쳤을 때의 투명하게 비추일 수 있는 특성임에 주의.
    < 2. RGB 16진수 값 지정 >
    - 접두사 # 뒤에 RGB 색상 값을 3byte 16진수 총 6자리로 표현하되, Red, Green, Blue 를 각각 1byte
    16진수 2자리씩 묶어서 혼합하는 형태로 지정하는 형식.
    16진수 값이 클 수록 빛의 세기가 증가함으로써 명도가 증가하고, 16진수 값이 작아질 수록 빛의 세기가 감소함으로써 명도가 낮아지는 특성. 따라서 #ffffff 는 흰색, #000000 은 검은색을 표현.
    각각 2자리 RGB 값의 쌍이 동일한 값인 경우에는 한 자리로 압축하여 표현 가능.
    단, 각 자리 값의 쌍이 모두 동일한 경우에만 적용 가능.
    또한, 6자리 16진수 표기 이후에 2자리 16진수 자리를 추가하여 opacity 값 설정 가능.

    형식    :    #   ff     ff     ff   [   ff    ]
                    red   green   blue  [ opacity ]


    ※ RGB 16진수 표현 이나 rgb, rgba 함수를 이용한 opacity 설정은 background-color 나 color 속성에 대한 개별적인 투명도를 지정하는 반면, 별도의 opacity 속성으로 지정한 경우에는 배경이나 텍스트 모두에 투명도가 적용.
    단.글자색이 흰색이므로 글머리 기호도 표시되지 않음에 주의
    < 3. 함수형 RGB 값 지정 >
    - RGB 색상 값을 1byte 로 표현된 10진수 총 3자리 또는 백분율로 표현. 
    RGB 표기에 10진수와 백분율 혼용 불가. 
    10진수 3자리 뒤에 백분율로 표기하는 형식 또는 0 ~ 1.0 범위의 값으로 opacity 추가 가능.
    RGB 를 공백으로 구분하는 경우 opacity 앞에는 슬러쉬(/)로 구분.
    형식    :    rgb( 255 ,  255 ,  255 )            - 쉼표(,) 구분자로 구분
                      red  green   blue
                 rgb( 255    255    255 )            - 공백으로 구분

                 rgb( 100%  100%   100% )            - 백분율로 RGB 지정

                 rgb( 255 ,  255 ,  255 ,  100% )    - opacity 는 백분율 또는 0 ~ 1.0 범위의
                                                       값으로 지정 가능

                 rgb( 255    255    255  /    1 )    - RGB 를 공백으로 구분하는 경우
                                                       opacity 앞에는 슬러쉬(/)로 구분
    < 4. 함수형 RGBA(Red Green Blue Alpha) >
    - CSS Colors Level 4 부터 함수 rgb() 와 동일하게 동작.
    형식    :    rgba( 255 ,  255 ,  255 , 0.8 )
                      red  green   blue  opacity
                 rgba( 255    255    255 / 0.8 )    - 공백으로 구분 시 opacity 앞 슬러쉬(/)로 구분

                 rgba( 255    255    255 / 80% )    - opacity 는 백분율 또는 0 ~ 1.0 범위의
                                                      값으로 지정 가능


7. px, %, em, rem
    < % 단위 >
    - 부모 요소를 기준으로 적용되는 모든 단위에 대한 상대적 백분율(비율).
    부모 요소가 중첩되고 계층별 부모 요소에 % 단위가 각각 적용되었다면 누적 비율 적용.
    ※ 부모 요소에 대한 font-size 미지정 시 기본 pixel 은 16px 로 적용.
    기본 픽셀이라함은 상위 요소에 대한 font-size 미지정 시 최상위 Root 요소가 되는 html 태그 요소에 적용되는 디폴트 값을 의미.
    ※ font-size 의 최소 적용 가능한 pixel 크기는 브라우저 마다 상이할 수 있음에 주의.
    크롬의 경우 텍스트에 적용 가능한 최소 픽셀은 10px.
    
    < em 단위 >
    - 부모 요소를 기준으로 적용되는 font-size 속성 크기를 기반으로한 상대적 배율.
    부모 요소가 중첩되고 계층별 부모 요소의 font-size 속성에 em 단위가 각각 적용되었다면 누적 배율 적용.
    단, 임의의 부모 계층이나 자기 자신 요소에 대한 font-size 속성을 px 로 지정하면 그 시점부터 다시 초기화 되어 이전에 적용되었던 배율은 무시.
    < em 과 % 차이 >
    - 결과적으로 % 와 em 은 리터럴 값 표현과 단위 명칭만 다를뿐 동일하게 적용되는 것처럼 보이지만, % 는 상속 계층 내에서 단위 지정이 가능한 모든 개별 속성간 누적 배율이 적용되는
    반면, em 은 상속 계층간 font-size 속성을 기반으로한 상대적 누적 배율이 적용.
    즉, font-size 속성이 아닌 다른 임의의 속성에 em 단위를 적용하는 경우 해당 속성에 대한 배율이 적용되는 것이 아닌 font-size 속성에 대한 누적 배율로 해당 속성에 대한 크기가 결정. 따라서 상속 계층 내 font-size 속성이 아닌 다른 속성에 em 단위를 연쇄적으로 적용한다 해도 font-size 속성의 크기가 변하지 않는 한 em 단위의 적용은 Root 요소에 적용된 디폴트 font-size에 대한 배율만 적용.
    16px * 20 = 320px   - 상속 계층 내 font-size 속성 크기가 변하지 않는 한 다른 속성에 대한 상속 계층간 em 단위 적용은 최상위 부모 계층에 지정된 font-size 속성 크기에 대한 배율만 적용.
    < calc 함수 > 
    - 단일 값이 아닌, 단위간 산술 연산이 필요한 경우 활용.
    < rem(root em) >
    - 최상위 부모(root) 요소(html 태그)의 font-size 속성에 대한 배율만 적용. 즉, em 과 달리 최상위 부모 외 중간 상위 계층에 대하여 font-size 속성을 px, %, em 등의 단위를 적용하더라도 누적 배율이나 그 크기가 적용되지 않고 무조건 최상위 root 에 지정된 크기에 대한 배율만 적용되는 특성.
    < Root 요소의 속성 지정 >
    - 아래와 같이 html 태그나 :root 가상 클래스 선택자를 이용하여 지정. 
        html {
        font-size:20px;
        }
    < 가상 클래스 선택자 root >
    - 문서의 root 요소를 의미하며, 일반적으로 HTML 에서는 html 태그 요소를 의미.

8. % 와 블럭 요소 특성을 활용한 화면 채우기
    < 블럭요소의 특성 >
    - 블럭요소는 너비에 대하여 수평 영역 전체를 차지하지만, 높이는 내부 컨텐트가 가지는 높이에 의하여 결정.
    < % 단위의 특성 >
    - % 는 부모 요소를 기준으로 부모 요소의 컨텐트 영역내에서의 상대적 백분율 적용.
    p 태그는 블럭요소이므로 내부 컨텐트가 차지하는 높이에 의해 p 태그의 높이가 결정되는데, 부모 요소인 body 와 root 에 별도의 높이가 결정되지 않는 이상 p 태그의 높이에 대한 100% 지정은 부모요소 내에서 그 크기가 상대적으로 결정 되는 % 단위의 특성과 내부 컨텐트의 크기에 의하여 높이가 결정되는 body 와 html 등의 블럭요소 특성이 서로 상쇄되어 의미없는 높이 지정에 불과.
    부모의 컨텐트 영역 내에서 상대적 비율이 적용되는 % 단위의 특성으로 인해 p 태그의 부모인 body 의 높이에 100% 비율을 적용하고 다시 root 요소인 html 태그의 높이에 100% 비율을 연쇄적으로 적용함으로써, html 태그의 부모가 되는 Viewport 영역 높이
    전체를 차지.
    ※ Viewport : 웹 페이지가 장치나 플랫폼에 따라 브라우저를 통해 화면에 표시되는
9. vw, vh 단위
    < Viewport >
    - 웹 페이지가 장치나 플랫폼에 따라 브라우저를 통해 화면에 표시되는 디스플레이 영역. 
    뷰포트는 브라우저 영역에서 스크롤바 영역까지를 모두 포함.
    단, body 의 영역은 스크롤바 영역을 포함하지 않음에 주의.
    < vw(viewport width) >
    - 뷰포트 영역에서의 너비에 대한 백분율 지정 단위.
    < vh(viewport height) >
    - 뷰포트 영역에서의 높이에 대한 백분율 지정 단위.
        p {
        background-color: gray;

        /*
            블럭요소 p 태그로 브라우저 화면 전체를 채우기 위해
            p 태그에 브라우저에서 기본적으로 지정되는 상/하 마진 삭제.
        */

        /* margin: 0; */
        /* width:100vw; */
        /* height: 100vh; */
        }
    body 는 별도의 크기 설정을 하지 않는 이상 스크롤 바를 제외한 뷰포트 영역 내에서 그 크기가 결정되고 브라우저에서 기본적으로 지정되는 마진으로 인해 기본적으로 뷰포트 영역 보다는 작을 수 밖에 없는 것이 일반적.
    따라서 p 태그에 대한 100vw, 100vh 는 브라우저 디스플레이 영역 전체 너비와 높이를 영역으로 할당함으로써 부모가 되는 body 태그보다 영역이 더 커지는 현상으로 인해 화면영역을 벗어나게 되고 이는 수평과 수직에 대한 스크롤바가 생성되는 문제점 야기.

10. 블럭요소에 대한 100vw
    블록 요소인 p 태그에 대한 100vw 사용은 지양.
    body 태그에 대한 마진을 삭제함으로써 body 와 p 태그의 크기를 뷰포트 크기로 일치시켜 p 태그가 화면 전체를 다 차지하는 화면 구성 가능. 하지만 p 태그는 블럭 요소이므로 수평에 대한 100vw 설정이 의미가 없으며, 오히려 100vw 설정으로 인한 문제발생 소지가 커짐. 이는 body 를 구성하는 수직 컨텐츠의 내용이 많아져 수직 스크롤이 생성되면 body 는 수직 스크롤바 영역을 포함하지 않는 수평 너비를 가지는 반면, 자식 요소인 p 태그는 100vw 설정으로 인해 수직 스크롤바 영역을 포함한 더 넓은 수평 너비를 가지게 됨으로써 부모인 body 의 수평 영역을 벗어나게 되어 수평 스크롤바가 생성되는 문제점 발생. 따라서 블럭요소에 대한 100vw 는 사용 지양.

11. max-width, max-height, min-width, min-height
    < min-width > - 이상
    - 요소가 가질 수 있는 최소 너비를 지정.
    단, 이는 요소의 최소 너비를 지정하는 것이지 브라우저 창의 너비를 늘인다해서 그 최대 크기를 제한하지는 않음.
    즉, 브라우저 창의 너비가 min-width 보다 작은 경우에는 요소의 최소 크기를 제한함으로서 스크롤이 생성되지만, 브라우저 창의 너비가 min-width 보다 큰 경우에는 요소의 최대 크기를 제한하지는 않음에 주의.
    /* 요소의 너비를 700px 이상으로 설정. */
    /* min-width:700px; */
    < max-width > - 이하
    - 요소가 가질 수 있는 최대 너비를 지정.
    브라우저 창의 너비를 늘여도 요소의 너비가 max-width 로 제한.
    /* 요소의 너비를 1000px 이하로 설정. */
    /* max-width: 1000px; */

    < min-height > - 이상
    - 요소가 가질 수 있는 최소 높이를 지정.
    브라우저 창의 높이를 줄여도 요소의 높이가 min-height 로 제한.
    /* 요소의 높이를 500px 이상으로 설정. */
    /* min-height: 500px; */
    < max-height > - 이하
    - 요소가 가질 수 있는 최대 높이를 지정.
    요소의 컨텐츠의 양이 많아져도 요소의 높이가 max-height 로 제한.
    /* 요소의 높이를 700px 이하로 설정.. */
    /* max-height: 700px; */

12. vmin, vmax
    < vmin >
    - vw 와 vh 중 작은 값으로 단위 평가.
    <vmax >
    - vw 와 vh 중 큰 값으로 단위 평가.

13. >margin, padding 에 대한 백분율
    < margin, padding 에 대한 백분율 적용 >
    - 백분율(%)은 부모 요소에 대한 비율로 결정되는데, 주의할 것은 maring 과 padding 은 부모요소의 높이가 아닌 너비에 대한 백분율로 결정됨에 유의.