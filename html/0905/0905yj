1. fixed 의 컨테이닝 블럭(Containing block)
    < 컨테이닝 블럭(Containing block) >

    - 어떤 요소가 생성되는 위치나 크기에 영향을 주는 부모 또는 조상이되는 블럭 요소로써, 부모 요소의 컨텐트 영역이 컨테이닝 블럭으로 인식되는 것이 일반적이나 항상 그런것은 아니며 이는 자손 요소나 조상 요소의 포지션(position) 속성에 따라  컨테이닝 블럭이 되는  조상  요소가  어떤 요소가 될지 달라질 수 있음.
    이러한 요건으로 인해 컨테이닝 블럭에 따라  자손 요소가 시작되는 경계 기준이 되는 조상 요소의 박스 영역이 달라질 수 있으며, 또한 컨테이닝 블럭에 따른 자손 요소의 크기 결정 요인으로 작용.
    단, 자손 요소의 시작 경계가 되는 컨테이닝 블럭과 자손 요소의 크기를 결정하는 컨테이닝 블럭이 항상 같지는 않음에 주의.

    < fixed 요소의 컨테이닝 블럭 >

    1) 위치에 대한 컨테이닝 블럭
    
    - 옵셋이 설정되지 않은 경우 : 무조건 가장 가까운 부모요소가 컨테이닝 블럭으로 기준이 되어 배치.

    - 옵셋이 설정된 경우 : 옵셋이 설정되지 않은 상태에서의 최초 디스플레이 위치를 기준으로 뷰포트가 컨테이닝 블럭이 되어 배치.

    ※ 위치에 대한 컨테이닝 블럭은 스크롤바가 생성되지 않은 상태에서의 뷰포트 영역이 기준이 되므로, 스크롤바가 생성시에는 그 위치가 변경되거나 화면상에 보이지 않을 수 있음에 주의.

    2) 크기에 대한 컨테이닝 블럭

    - 옵셋 설정 여부와 관련없이 무조건 스크롤바를 제외한 뷰포트 영역이 컨테이닝 블럭으로 인정되어 결정.

2. relative 의 컨테이닝 블럭(Containing block)
    < relative 요소의 컨테이닝 블럭 >

    1) 위치에 대한 컨테이닝 블럭 
    - relative 요소 자신의 본래 위치가 항상 기준.

    2) 크기에 대한 컨테이닝 블럭
    - static 요소와 동일하게 무조건 가장 가까운 부모요소가 크기를 결정짓는 컨테이닝 블럭으로 인정.

3. 부모의 기준이 결정되지 않은 absolute 요소의 컨테이닝 블럭

    < 부모의 기준이 결정되지 않은 absolute 요소의 컨테이닝 블럭 >

    1) 위치에 대한 컨테이닝 블럭
    - 옵셋이 설정되지 않은 경우 : 무조건 가장 가까운 부모요소가 컨테이닝 블럭으로 기준이 되어 배치.

    - 옵셋이 설정된 경우 : 옵셋이 설정되지 않은 상태에서의 최초 디스플레이 위치를 기준으로 페이지 뷰포트가 컨테이닝 블럭이 되어 배치.

    ※ 위치에 대한 컨테이닝 블럭은 스크롤바가 생성되지 않은 상태에서의 화면 뷰포트 영역이 아닌, 스크롤바 생성 여부과 관련없이 페이지에 대한 뷰포트 영역임에 주의.

    2) 크기에 대한 컨테이닝 블럭
    - 옵셋 설정 여부와 관련없이 무조건 스크롤바를 제외한 뷰포트 영역이 컨테이닝 블럭으로 인정되어 결정.
    ※ 결과적으로 부모의 기준이 결정되지 않은 absolute 요소의 컨테이닝 블럭은 fixed 요소와 다르게 화면에 대한 뷰포트가 아닌 페이지에 대한 뷰포트가 적용되는 점을 제외하고는 모든 특성이 동일.

4. absolute 요소의 컨테이닝 블럭이 되기 위한 자격

    < absolute 요소의 컨테이닝 블럭이 되기 위한 자격 >
    -  static 이 아닌 포지션 속성을 가진 가장 가까운 부모 또는 조상 요소.

5. 쌓임맥락(Stacking context)

    < 쌓임맥락(Stacking context) >

    - 가상의 z 축을 사용한 HTML 요소를 3 차원으로 개념화시킴으로써 포지션 속성이 static 이 아니면서 z-index 속성 값이 auto(0)가 아닌 요소에 적용.

    < z-index >

    - 포지션 속성(relative, absolute, fixed)에 종속적인 속성으로 디폴트 값은 auto(0).
    속성에 적용되는 값은 단위가 없는 상대적인 정수값으로 z 축에 대한 상대적 위치를 결정하며 음수값 적용이 가능.
    z 축이 동일한 값들 간에는 요소가 생성된 순서에 따라 새로운 쌓임맥락이 생성되어, 생성순서가 늦을수록 상대적으로 높은 z 축 위치를 점유.
    속성 값이 높은 요소가 속성 값이 낮은 요소보다 항상 위에 배치되며 다음 4 가지 요인에 주의.

    1) 포지션 속성이 지정되지 않거나 static 인 경우에는 z-index 속성 값을 지정하여도 auto(0) 값 적용.

    2) 자식요소의 z 값은 항상 부모요소 내에서만 상대적 값이 인정되어 부모요소가 다른 형제요소보다  z 값이 낮다면 자식요소의 z 값이 부모요소의 형제인 요소의 z 값보다 아무리 더 높아도 부모요소에 대한 상대적 위치만 인정될뿐, 부모의 형제요소 보다는 항상 낮은 위치에 배치.

    3) auto(0) 값은 해당 요소에 대한 z 축값이 0 값으로 적용되는 것은 맞지만 그에 대한 자식요소가 존재하는 경우,  자식 요소의 z 축 값을 부모요소 내에서만 인정되는 종속적인 값으로 인정하는 것이 아니라 부모요소와 대등한 형제관계 요소처럼 상향 평가함으로써 부모요소와 형제관계에 있는 다른 요소와 대등한 z 축 평가를 진행.
    따라서 부모요소의 z 값이 auto(0) 이고 그에 대한 자식 요소가 부모의 다른 형제요소 보다 더 높은 z 값을 가진 경우, 자식 요소가 부모의 다른 형제요소 보다 위에 배치 가능.

    4) 부모요소가 auto(0) 가 아니고 z-index 값이 자식 요소의 z 값보다 아무리 높아도 부모요소는 자식요소보다 더 높은 위치 점유 불가.
    단, "3)" 과 같이 부모요소가 auto(0) 값을 가지고 자식요소의 z 값이 음수인 경우에는 z 축 값에 따른 상대적 위치로 높이가 결정되어 자식요소가 부모요소보다 낮은 위치에 배치 가능.
    하지만 부모요소에 transform 속성이 지정된 경우에는 부모요소가 auto 값을 가지고 자식요소의 z 값이 음수더라도 부모요소가 자식요소의 위에 배치될 수 없음에 유의.

    자식요소의 z 축값이 아무리 높아도 부모요소의 z 축값이 형제관계에 있는 다른 요소의 z 축 값보다 낮다면, 자식요소는 부모요소와 형제관계에 있는 다른 요소 보다 쌓임맥락이 항상 낮은 위치에 존재하게 되며, 단지 z 축에 따른 부모요소 내 같은 형제 요소들과의 쌓임맥락만 인정.

    부모요소의 z 축 값이 auto(0) 인 경우에는 자식요소의 상대적 위치가 부모에 종속되는 것이 아니라, 부모와 대등한 쌓임맥락으로 승격되어 부모요소와 형제 관계에 있는 다른 요소와 대등한 관계에서 상대적 위치를 결정.


6. 포지셔닝을 활용한 요소의 배치와 정렬
    
    container 를 기준으로 box 요소들을 배치하기 위해 box 요소들을 absolute 로 지정하고 블럭요소인 container 의 수평 정렬을 유지하기 위해 relative 로 지정.
    container 를 fixed 나 absolute 로 지정하면 요소의 본래 속성인 블럭이 아닌 인라인 블럭처럼 인식하여 기존 설정으로는 수평 정렬 불가함에 주의.

7. 포지션을 활용한 배경과 컨텐트에 대한 opacity 분리

    container 가 인라인 블럭요소 처럼 크기가 결정되어야만 span 을 배경의 중앙에 배치가 가능하므로 relative 가 아닌, absolute 나 fixed 로 지정.
    
    absolute 나 fixed 는 인라인 블럭요소 처럼 컨텐트 만큼의 크기를 가지는 것뿐, 실제 인라인 블럭요소와 동일하지는 않음에 주의.

8. 예시