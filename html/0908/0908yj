1. align-items &amp; align-self

    < align-items >

    - 주축에 위치한 항목들의 교차축 방향에 대한 항목들의 정렬 방식을 플렉스 컨테이너에서 지정.
        
    < stretch >

    - aling-items 속성 미지정시의 디폴트 값으로 교차축의 크기가 지정되지 않은 항목을 컨테이너 크기에 맞도록 늘이는 특성.

    < align-self >

    - 주축에 위치한 항목들의 교차축 방향에 대한 항목의 정렬 방식을 개별 항목에서 직접 지정.

2. justify-content

    < justify-content >

    - 주축 방향에 대한 항목들의 정렬 및 배치 형태를 결정.
    단, 주축의 항목들이 주축 방향으로 플렉스 컨테이너를 가득 채운 상태에서는 의미없는 속성.

    < flex-start >

    - 항목들을 시작선에서부터 순서대로 배치. 디폴트 값

    < flex-end >

    - 항목들의 정렬 방향은 바뀌지 않지만 끝선을 기준으로 배치.

    < center >

    - 항목들을 주축에 대한 중앙에 정렬하여 배치.

    < space-between >

    - 항목들 사이의 공간을 동일하게 배분하여 배치.
    단, 이때의 공간은 마진이 아닌 Flexbox 내에서의 별도로 설정되는 공간을 의미함에 주의.

    < space-around >

    - 개별 항목들 주변의 공간을 모두 동일하게 배분하여 배치.
    따라서 항목들 사이의 공간은 시작선과 끝선에 인접한 공간에 비해 항상 2 배로 할당.

    < space-evenly >

    - 항목들 사이의 공간과 시작선과 끝선에 인접한 공간을 모두 동일하게 배분.

3. align-content

    < align-content >

    - wrap 설정으로 다중 주축 생성 시의 주축간의 정렬 및 배치 형태를 결정.
    justify-content 속성의 값과 거의 동일한 속성 값을 사용하며 동작하는 방식도 동일.

    ※ MS 의 VSCODE 에서는 space-evenly 에 대한 자동완성 미지원.

    < stretch >

    - 다중 주축에 대하여 플렉스 컨테이너의 크기에 맞추어 자동으로늘어나게 하는 특성.

4. flex-basis, flex-grow, flex-shrink

    < flex-basis >

    - 항목에 대한 주축 방향 크기를 결정짓는 속성으로 flex-direction 이 row 면 너비를 column 이면 높이를 결정.
    기본값은 auto 로 할당되며, 이 경우 항목이 가지는 컨텐트의 크기가 flex-basis로 설정되어 그 크기만큼 공간을 점유.
    flex-basis 가 auto 가 아닌 이상, 항목에 할당된 너비(width)나 높이(height) 보다 flex-basis 값이 우선 적용.

    < flex-grow >

    - 주축 내에 항목들을 배치하고 남는 공간에 대하여 flex-grow 를 항목별로 할당함으로써 개별 항목에 대한 상대적 비율로 남는 공간을 배분하여 전체 주축 공간을 모두 점유.

    < flex-shrink >

    - flex-grow 에 상반된 특성을 가지는 속성으로 항목들의 크기가 주축의 전체 크기를 오버플로우 했을 때 주축의 크기에 맞추어 개별 항목 별 상대적 줄어드는 비율을 지정.
    값이 클수록 줄어드는 비율이 상대적으로 높아지는 특성.

5. flex

    < flex >
    - flex-grow, flex-shrink, flex-basis 를 flex 속성을 이용하여 순서대로 한번에 지정 가능.

    flex-grow 와 flex-shrink 가 동일한 값을 가지는 경우에는 두 속성값을 하나의 값으로 축약하여 표현 가능하며, flex-basis 값이 auto(0) 인 경우도 생략 가능.

6. width(height) 와 flex-basis 차이


    < flex-basis 와 width, height 의 차이 >

    - flex-basis 는 아이템에 대한 초기 크기를 지정할 뿐 컨텐트의 실제 크기에 가변적이고 주축의 방향에 따라 width 또는 height 로 변경될 수 있는 가변적인
    특성.
    따라서 flex-basis 는 좀 더 유연한 확장이 가능한 반면, width 와 height 는 크기에 대하여 강제적이면서 제한적인 특성.
    즉, width 와 height 는 내부 컨텐트를 무조건 설정한 크기로 제한하고 주축에 대한 방향에 관계없이 항상 일관된 속성의 특성을 유지하는 반면, flex-basis 는 지정한 크기 내로 내부 컨텐트가 포함되면 그 크기를 유지하지만, 지정한 크기를 벗어나도 그에 맞게 확장/축소되고 주축의 방향에 따라 width, height 의 역할이 달라질 수 있는 특성.

    1. 주축의 변경 

    기본적으로 width 로 정의된 이미지는 그 너비에 맞게 컨텐트가 축소되어 표시되는 것을 확인 가능한 반면, flex-basis 로 정의된 이미지는 지정한 크기에 관계없이 본래의 내부 컨텐트 이미지 크기에 맞추어 자동으로 확장되어 표시되는 것을 확인
    가능.
    또한, 주축의 방향을 column 으로 변경한 경우에도 width 로 정의된 이미지는 그대로 이미지의 너비로 표현이 되지만, flex-basis 로 정의된 이미지는 주축이 변경됨에 따라 너비가 높이로 변경되어 표현되는 것을 확인 가능.


    2. 아이템 내 더 큰 내부 컨텐트 

    width 로 지정된 아이템의 크기 보다 내부 컨텐트(이미지)가 큰 경우에는 아이템의 너비는 고정된 상태에서 내부 컨텐트가 오버플로우 되는 것을 확인 가능.
    반면, 동일한 상항에서 flex-baiss 로 지정된 경우에는 본래의 내부 컨텐트의 크기에 맞추어 아이템의 너비가 자동으로 확장되는 것을 확인 가능.

7. 다중 주축에 대한 비율 적용

    1. flex-wrap 에 대한 flex 적용*/

    wrap 설정으로 인한 다중 주축이 생성될 때 개별 주축을 하나의 플렉스 컨테이너로 인식함으로써, 플렉스에 적용 가능한 모든 속성들은 하나의 주축에서만 그 속성의 특성이 적욤됨에 주의.
    따라서 아래와 같이 다중 주축에 대한 flex 비율은 적용되지 않으며 하나의 주축에 대한 비율만 적용됨을 확인 가능.

    2. flex-wrap 에 대한 퍼센티지 적용 

    wrap 설정으로 인한 다중 주축에 대한 비율은 아래와 같이 개별 주축에 대한 컨텐트의 크기를 직접 퍼센티지로 설정함으로써 적용 가능.

8. flex, 가상요소 선택자, 포지션 활용 opacity 분리

    가상요소 선택자에 부모의 크기에 맞추어 배경을 지정하되 absolute 를 지정함으로써 플렉스 컨테이너 내의 다른 아이템과 다른 문맥흐름을 가지게 됨으로써 옵셋 설정없이도 플렉스 컨테이너의 최초 시점부터 자리를 차지하여 별도의 독립적인 배경 설정이 가능.

    ※ absolute 를 지정한 요소도 일반 static 아이템과 동일하게 플렉스 속성 설정이 동일하게 적용됨에 주의.

    부모요소인 flexBox 컨테이너에 의해 간접적 relative 포지션 속성을 가지는 span 보다 직접적인 포지션 설정이 우선시 적용되는 백그라운드가 absolute 로 올라옴으로써 span 요소의 컨텐츠가 가려지므로 span 의 z 축을 변경하여 올림.

9. 예제

    < 문제 >

    - 아래 HTML 코드와 Flexbox 레이아웃을 이용하여 화면구현 예시와 같은
    블럭 배열을 완성하라.

    =========================================================================

    < 조건>

    1) container 의 너비와 높이는 모두 430px 로 지정.

    2) 블럭의 너비와 높이는 모두 100px 로 지정.

    3) 블럭 사이 공간은 10px 로 지정.

10. 예제
